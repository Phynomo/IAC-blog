---
import { Image } from "astro:assets";
import Pagination from "@/components/Pagination.astro";
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { sortByDate } from "@/lib/utils/sortFunctions";
import { markdownify, plainify } from "@/lib/utils/textConverter";
import Post from "@/partials/Post.astro";
import type { TIndexData } from "@/types";
import { getEntry } from "astro:content";
import Breadcrumb from "@/components/Breadcrumb.astro";

const { blog_folder, summary_length } = config.settings;

export async function getStaticPaths() {
  const posts = await getSinglePage(config.settings.blog_folder as any);
  const paths: { params: { category: string; slug: string } }[] = [];

  // Crear un mapa para almacenar categorías y sus páginas sin duplicados
  const uniquePaths: { [key: string]: Set<string> } = {};

  posts.forEach((post: any) => {
    post.data.categories.forEach((cat: string) => {
      // Calcular el número total de páginas para esta categoría
      const totalPages = Math.ceil(
        posts.filter((x: any) => x.data.categories.includes(cat)).length /
          config.settings.pagination
      );

      // Inicializar el Set para la categoría si no existe
      if (!uniquePaths[cat]) {
        uniquePaths[cat] = new Set();
      }

      // Agregar cada página de la categoría al Set
      for (let i = 1; i <= totalPages; i++) {
        uniquePaths[cat].add(i.toString());
      }
    });
  });

  // Convertir el mapa de uniquePaths en el array paths esperado
  Object.keys(uniquePaths).forEach((category) => {
    uniquePaths[category].forEach((slug) => {
      paths.push({
        params: {
          category: category,
          slug: slug,
        },
      });
    });
  });

  return paths;
}


const { slug, category } = Astro.params;
const postIndex = (await getEntry<any, string>(
  blog_folder,
  "_index"
)) as TIndexData;
let posts = await getSinglePage(config.settings.blog_folder as any);
posts = posts.filter((x: any) => x.data.categories.includes(category));

const sortedPosts = sortByDate(posts);
const totalPages = Math.ceil(posts.length / config.settings.pagination);
const currentPage = slug && !isNaN(Number(slug)) ? Number(slug) : 1;
const indexOfLastPost = currentPage * config.settings.pagination;
const indexOfFirstPost = indexOfLastPost - config.settings.pagination;
const currentPosts = sortedPosts.slice(indexOfFirstPost, indexOfLastPost);
---

<Base title={postIndex?.data.title}>
  <section class="section">
    <div class="container">
      <Breadcrumb pages={[{page:'Blog - ' + category}]}></Breadcrumb>
      
      <h1 class="my-10 text-center font-normal lg:text-[56px]">
        {category == "todos" ?
          `Todos los artículos`
          :
          `Artículos sobre ${category}`
        }
      </h1>
      {
        slug == "1" && (
          <h2 class="my-4 text-center font-normal lg:text-[40px]">
            Publicación más reciente.
          </h2>

          <div class="row col-12 pb-14 pt-6">
            <div class="md:col-6">
              {currentPosts[0].data.image && (
                <Image
                  transition:name={currentPosts[0].id}
                  class="rounded-lg"
                  src={currentPosts[0].data.image}
                  alt={currentPosts[0].data.title}
                  width={925}
                  height={475}
                />
              )}
            </div>
            <div class="md:col-6">
              <h2 class="h3 mb-2 mt-4">
                <a
                  href={`/${blog_folder}/${category}/${currentPosts[0].slug}`}
                  class="block hover:text-primary"
                >
                  {currentPosts[0].data.title}
                </a>
              </h2>
              <p
                set:html={plainify(
                  currentPosts[0].data.description.slice(0, summary_length)
                )}
              />
              <a
                class="btn btn-primary mt-4"
                href={`/${blog_folder}/${category}/${currentPosts[0].slug}`}
                rel=""
              >
                Leer más
              </a>
            </div>
          </div>
        )
      }
      <div class="row">
        {
          currentPosts.slice(slug == "1" ? 1 : 0).map((post) => (
            <div class="col-12 mb-8 sm:col-6 lg:col-4">
              <Post category={category} post={post} />
            </div>
          ))
        }
      </div>
      <Pagination
        section={config.settings.blog_folder}
        totalPages={totalPages}
        currentPage={currentPage}
        category={category}
      />
    </div>
  </section>
</Base>
